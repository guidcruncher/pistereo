{
  "name": "pistereo",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run rimraf && npm run client-build && nest build",
    "rimraf": "npx rimraf ./dist",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\" && cd ./client && npm run format",
    "start": "nest start",
    "docker:dev": "MY_UID=$(id -u) MY_GID=$(id -g) docker compose -f ./docker-compose-dev.yaml up --build -d",
    "docker:stop": "MY_UID=$(id -u) MY_GID=$(id -g) docker compose -f ./docker-compose-dev.yaml stop && MY_UID=$(id -u) MY_GID=$(id -g) docker compose -f ./docker-compose-dev.yaml rm -f",
    "docker:sh": "MY_UID=$(id -u) MY_GID=$(id -g) docker compose -f ./docker-compose-dev.yaml exec --user appuser --privileged -t pistereo-dev /bin/bash",
    "docker:restart": "npm run docker:stop && npm run docker:dev",
    "docker:logs": "MY_UID=$(id -u) MY_GID=$(id -g) docker compose -f ./docker-compose-dev.yaml logs -f",
    "docker:deploy-dev": "bash -e -c ./scripts/deploy.sh dev",
    "docker:deploy-prod": "bash -e -c ./scripts/deploy.sh prod",
    "start:dockerdev": "npm run rimraf && concurrently --names \"VUE,NEST\" -c \"auto,auto\" \"npm run client-dev-build\" \"nest start --watch\"",
    "start:dev": "npm run rimraf && npm run format && concurrently --names \"VUE,NEST\" -c \"auto,auto\" \"npm run client-dev-build\" \"nest start --watch\"",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/server/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "client-dev-build": "cd ./client && npm run dev-build",
    "client-build": "cd ./client && npm run build",
    "client-lint": "cd ./client && npm run format && npm run lint"
  },
  "dependencies": {
    "@fastify/compress": "^8.0.1",
    "@fastify/cookie": "^11.0.2",
    "@fastify/secure-session": "^8.0.0",
    "@fastify/static": "^8.1.1",
    "@fastify/view": "^10.0.2",
    "@nestjs/common": "^11.0.12",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.0.12",
    "@nestjs/event-emitter": "^3.0.1",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/mongoose": "^11.0.3",
    "@nestjs/platform-express": "^11.0.12",
    "@nestjs/platform-fastify": "^11.0.12",
    "@nestjs/schedule": "^5.0.1",
    "@nestjs/serve-static": "^5.0.3",
    "@nestjs/swagger": "^11.1.0",
    "@types/mime-types": "^2.1.4",
    "@types/ws": "^8.18.0",
    "class-validator": "^0.14.1",
    "epg-parser": "^0.3.1",
    "js-yaml": "^4.1.0",
    "mime-db": "^1.54.0",
    "mime-type": "^5.0.3",
    "mongoose": "^8.13.1",
    "radio-browser": "^2.2.3",
    "reflect-metadata": "^0.2.2",
    "rimraf": "^6.0.1",
    "rxjs": "^7.8.1",
    "sodium-native": "^4.2.0",
    "ws": "^8.18.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.23.0",
    "@nestjs/cli": "^11.0.0",
    "@nestjs/schematics": "^11.0.2",
    "@nestjs/testing": "^11.0.12",
    "@swc/cli": "^0.6.0",
    "@swc/core": "^1.11.13",
    "@types/express": "^5.0.1",
    "@types/jest": "^29.5.14",
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^22.13.14",
    "@types/supertest": "^6.0.3",
    "concurrently": "^9.1.2",
    "esbuild": "^0.25.1",
    "eslint": "^9.23.0",
    "eslint-config-prettier": "^10.1.1",
    "eslint-plugin-prettier": "^5.2.5",
    "globals": "^16.0.0",
    "jest": "^29.7.0",
    "prettier": "^3.5.3",
    "source-map-support": "^0.5.21",
    "supertest": "^7.1.0",
    "ts-jest": "^29.3.0",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.2",
    "typescript-eslint": "^8.28.0"
  },
  "overrides": {},
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
